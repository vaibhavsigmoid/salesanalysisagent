```python
import pandas as pd
from datetime import datetime

def fix_data_format_change(source_df):
    # Create a copy of the source dataframe to avoid modifying the original
    df = source_df.copy()
    
    # Convert price to string with '$' prefix and two decimal places
    df['price'] = df['price'].apply(lambda x: f'${x:.2f}')
    
    # Add a 'date' column with the current date
    current_date = datetime.now().strftime('%d-%m-%Y')
    df['date'] = current_date
    
    # Ensure product_id is treated as string
    df['product_id'] = df['product_id'].astype(str)
    
    # Reorder columns to match target schema
    df = df[['product_id', 'product_desc', 'price', 'date']]
    
    return df
```

This `fix_data_format_change` function does the following:

1. Creates a copy of the source dataframe to avoid modifying the original data.
2. Converts the 'price' column to a string with a '$' prefix and ensures two decimal places.
3. Adds a 'date' column with the current date (as we don't have this information in the source data).
4. Ensures the 'product_id' column is treated as a string to accommodate alphanumeric values.
5. Reorders the columns to match the target schema.

This function can be used to prepare the source data for ingestion into the existing table. It handles the differences in data format without dropping any data. The resulting dataframe will have the same structure as the target table, allowing for seamless appending of new data.